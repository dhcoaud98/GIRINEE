/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'

function useInterval(callback, delay) {
  const savedCallback = useRef(); // 최근에 들어온 callback을 저장할 ref를 하나 만든다.

  useEffect(() => {
    savedCallback.current = callback; // callback이 바뀔 때마다 ref를 업데이트 해준다.
  }, [callback]);

  useEffect(() => {
    function tick() {
      savedCallback.current(); // tick이 실행되면 callback 함수를 실행시킨다.
    }
    if (delay !== null) {
      setTimeout(() => {
        clearInterval(id)
      }, 3120) // 만약 delay가 null이 아니라면 
      let id = setInterval(tick, delay); // delay에 맞추어 interval을 새로 실행시킨다.
      return () => clearInterval(id); // unmount될 때 clearInterval을 해준다.
    }
  }, [delay]); // delay가 바뀔 때마다 새로 실행된다.
}

export function Gtwo(props) {
  const { nodes, materials } = useGLTF('/G-2.glb')
  let [intensity, setIntensity] = useState(0)
  let timer = useInterval(() => {setIntensity(intensity + 0.01)
  clearInterval(timer)
  console.log('hi' + intensity)}, 30)
  
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.mesh_5.geometry} material={nodes.mesh_5.material} >
      <meshStandardMaterial attach="material" emissive={'lightblue'} emissiveIntensity={intensity} color="lightblue" roughness={0} metalness={0.3} />
      </mesh>
      <mesh geometry={nodes.mesh_6.geometry} material={nodes.mesh_6.material} >
      <meshStandardMaterial attach="material" emissive={'lightblue'} emissiveIntensity={intensity} color="lightblue" roughness={0} metalness={0.3} />
      </mesh>
      <mesh geometry={nodes.mesh_7.geometry} material={nodes.mesh_7.material} >
      <meshStandardMaterial attach="material" color="lightgray" roughness={0} metalness={0.5} />
      </mesh>
      <mesh geometry={nodes.mesh_8.geometry} material={nodes.mesh_8.material} >
      <meshStandardMaterial attach="material" color="lightgray" roughness={0} metalness={0.5} />
      </mesh>
    </group>
  )
}

useGLTF.preload('/G-2.glb')
